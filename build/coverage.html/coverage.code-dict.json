{"/home/travis/build/npmtest/node-npmtest-short/test.js":"/* istanbul instrument in package npmtest_short */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-short/lib.npmtest_short.js":"/* istanbul instrument in package npmtest_short */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_short = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_short = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-short/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-short && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_short */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_short\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_short.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_short.rollup.js'] =\n            local.assetsDict['/assets.npmtest_short.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_short.__dirname +\n                    '/lib.npmtest_short.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-short/node_modules/short/lib/short.js":"/**\n * @list dependencies\n */\n\nvar ID = require('short-id')\n  , mongoose = require('mongoose')\n  , Promise = require('node-promise').Promise\n  , ShortURL = require('../models/ShortURL').ShortURL;\n\n/**\n * @configure short-id\n */\n\nID.configure({\n  length: 6,\n  algorithm: 'sha1',\n  salt: Math.random\n});\n\n/**\n * @method connect\n * @param {String} mongdb Mongo DB String to connect to\n */\n\nexports.connect = function(mongodb) {\n  if (mongoose.connection.readyState === 0)\n    mongoose.connect(mongodb);\n\n  exports.connection = mongoose.connection;\n};\n\n/**\n * @method generate\n * @param {Object} options Must at least include a `URL` attribute\n */\n\nexports.generate = function(document) {\n  var generatePromise\n    , promise = new Promise();\n\n  document['data'] = document.data || null;\n\n  // hash was specified, so we should always honor it\n  if (document.hasOwnProperty('hash')) {\n    generatePromise = ShortURL.create(document);\n  } else {\n    document['hash'] = ID.store(document.URL);\n    generatePromise = ShortURL.findOrCreate({URL : document.URL}, document, {});\n  }\n\n  generatePromise.then(function(ShortURLObject) {\n    promise.resolve(ShortURLObject);\n  }, function(error) {\n    promise.reject(error, true);\n  });\n\n  return promise;\n};\n\n/**\n * @method retrieve\n * @param {Object} options Must at least include a `hash` attribute\n */\n\nexports.retrieve = function(hash) {\n  var promise = new Promise();\n  var query = { hash : hash }\n    , update = { $inc: { hits: 1 } }\n    , options = { multi: true };\n  var retrievePromise = ShortURL.findOne(query);\n  ShortURL.update( query, update , options , function (){ } );\n  retrievePromise.then(function(ShortURLObject) {\n    if (ShortURLObject && ShortURLObject !== null) {\n      promise.resolve(ShortURLObject);\n    } else {\n      promise.reject(new Error('MongoDB - Cannot find Document'), true);\n    };\n  }, function(error) {\n    promise.reject(error, true);\n  });\n  return promise;\n};\n\n/**\n * @method update\n * @param {String} hash - must include a `hash` attribute\n * @param {Object} updates - must include either a `URL` or `data` attribute\n */\n\nexports.update = function(hash, updates) {\n  var promise = new Promise();\n  ShortURL.findOne({hash: hash}, function(err, doc) {\n    if (updates.URL) {\n      doc.URL = updates.URL;\n    }\n    if (updates.data) {\n      doc.data = extend(doc.data, updates.data);\n      doc.markModified('data'); //Required by mongoose, as data is of Mixed type\n    }\n    doc.save(function(err, updatedObj, numAffected) {\n      if (err) {\n        promise.reject(new Error('MongoDB - Cannot save updates'), true);\n      } else {\n        promise.resolve(updatedObj);\n      }\n    });\n  });\n  return promise;\n};\n\n/**\n * @method hits\n * @param {Object} options Must at least include a `hash` attribute\n */\n\nexports.hits = function(hash) {\n  var promise = new Promise();\n  var query = { hash : hash }\n    , options = { multi: true };\n  var retrievePromise = ShortURL.findOne(query);\n  retrievePromise.then(function(ShortURLObject) {\n    if (ShortURLObject && ShortURLObject !== null) {\n      promise.resolve(ShortURLObject.hits);\n    } else {\n      promise.reject(new Error('MongoDB - Cannot find Document'), true);\n    };\n  }, function(error) {\n    promise.reject(error, true);\n  });\n  return promise;\n};\n\n/**\n * @method list\n * @description List all Shortened URLs\n */\n\nexports.list = function() {\n  return ShortURL.find({});\n};\n\n/**\n * @method extend\n * @description Private function to extend objects\n * @param {Object} original The original object to extend\n * @param {Object} updated The updates; new keys are added, existing updated\n */\n\nvar extend = function(original, updates) {\n  Object.keys(updates).forEach(function(key) {\n    original[key] = updates[key];\n  });\n  return original;\n};\n","/home/travis/build/npmtest/node-npmtest-short/node_modules/short-id/lib/index.js":"\n/**\n * Self-contained short-life ID generating module\n *\n * Not guarenteed to be unique outside of a single instance of the module.\n */\n\nvar sechash = require('sechash');\nvar merge   = require('merge-recursive');\n\nvar current = 0;\nvar storage = { };\nvar config = {\n\tlength: 6,\n\talgorithm: 'sha1',\n\tsalt: Math.random,\n\tuseObjects: false\n};\n\nexports.configure = function(conf) {\n\tObject.keys(conf).forEach(function(key) {\n\t\tconfig[key] = conf[key];\n\t});\n};\n\nexports.generate = function(conf) {\n\tconf = merge({ }, config, conf || { });\n\t\n\tvar key;\n\tvar salt = config.salt;\n\t\n\tif (typeof salt === 'function') {\n\t\tsalt = salt();\n\t}\n\t\n\tdo {\n\t\tkey = sechash.basicHash(config.algorithm, String(current++) + salt).slice(0, config.length);\n\t} while (storage.hasOwnProperty(key));\n\t\n\tstorage[key] = null;\n\t\n\tif (conf.useObjects) {\n\t\tkey = new exports.Id(key);\n\t}\n\t\n\treturn key;\n};\n\nexports.invalidate = function(key) {\n\tdelete storage[keyValue(key)];\n};\n\nexports.store = function(value) {\n\tvar key = exports.generate();\n\tstorage[keyValue(key)] = value;\n\treturn key;\n};\n\nexports.fetch = function(key) {\n\treturn storage[keyValue(key)];\n};\n\nexports.fetchAndInvalidate = function(key) {\n\tvar value = exports.fetch(key);\n\texports.invalidate(key);\n\treturn value;\n};\n\n// ------------------------------------------------------------------\n\nvar type = function(value) {\n\treturn Object.prototype.toString.call(value).slice(8, -1);\n};\n\nexports.isId = function(value) {\n\treturn (type(value) === 'Object' && (value instanceof exports.Id || value._isShortIdObject));\n};\n\n// ------------------------------------------------------------------\n\nexports.Id = function(id) {\n\tif (! this instanceof exports.Id) {\n\t\treturn new exports.Id(id);\n\t}\n\t\n\tif (! id) {\n\t\tid = exports.generate({ useObjects: false });\n\t}\n\t\n\tObject.defineProperty(this, 'id', {\n\t\tvalue: id,\n\t\twritable: false,\n\t\tenumerable: true\n\t});\n};\n\nObject.defineProperty(exports.Id.prototype, '_isShortIdObject', {\n\tvalue: true,\n\twritable: false,\n\tenumerable: false\n});\n\nexports.Id.prototype.toString = function() {\n\treturn this.id;\n};\n\n// ------------------------------------------------------------------\n\nfunction keyValue(key) {\n\treturn exports.isId(key) ? String(key) : key\n}\n\n","/home/travis/build/npmtest/node-npmtest-short/node_modules/short/models/ShortURL.js":"\n/**\n * @model ShortURL\n */\n\nvar options\n  , ShortURLSchema\n  , mongoose = require('mongoose')\n  , wrapper = require('./prototype.js')\n  , Schema = mongoose.Schema\n  , ObjectId = Schema.ObjectId;\n\noptions = { \n  versionKey : false\n};\n\nShortURLSchema = new Schema({\n  id         : { type : ObjectId },\n  URL        : { type : String, unique: false },\n  hash       : { type : String, unique: true },\n  hits       : { type : Number, default: 0 },\n  data       : { type : Schema.Types.Mixed },\n  created_at : { type : Date, default: Date.now },\n}, options);\n\nexports.ShortURL = new wrapper.Model(mongoose.model('ShortURL', ShortURLSchema));\n","/home/travis/build/npmtest/node-npmtest-short/node_modules/short/models/prototype.js":"\n/**\n * @list dependencies\n */\n\nvar Promise = require('node-promise').Promise;\n\n/**\n * @description wrapper for models to return promises versus executing immediately\n */\n\nexports.Model = function(mongooseModel) {\n  this.baseModel = mongooseModel;\n};\n\n/**\n * @method find\n * @description wraps mongodb find with a promise\n */\n\nexports.Model.prototype.find = function(query, fields, options) {\n  var promise = new Promise();\n  this.baseModel.find(query, fields, options, function(error, result) {\n    if (error) {\n      promise.reject(error, true);\n    } else {\n      promise.resolve(result);\n    };\n  });\n  return promise;\n};\n\n/**\n * @method findOne\n * @description wraps mongodb findOne with a promise\n */\n\nexports.Model.prototype.findOne = function(query, fields, options) {\n  var promise = new Promise();\n  this.baseModel.findOne(query, fields, options, function(error, result) {\n    if (error) {\n      promise.reject(error, true);\n    } else {\n      promise.resolve(result);\n    };\n  });\n  return promise;\n};\n\n/**\n * @method update\n * @description wraps mongodb update with a promise\n */\n\nexports.Model.prototype.update = function(query, document, options) {\n  var promise = new Promise()\n  this.baseModel.update(query, document, options, function(error, affected) {\n    if (error) {\n      promise.reject(error, true);\n    } else {\n      if (affected === 0) {\n        promise.reject(new Error('MongoDB - Cannot find Document'), true);\n      } else {\n        promise.resolve();\n      };\n    };\n  });\n  return promise;\n};\n\n/**\n * @method create\n * @description wraps mongodb create with a promise\n */\n\nexports.Model.prototype.create = function(data) {\n  var promise = new Promise();\n  this.baseModel.create(data, function(error, result) {\n    if (error) {\n      if (error.message && error.message.match(/E11000/i)) {\n        promise.reject(new Error('Duplicate Key Error'), true);\n      } else {\n        promise.reject(error, true)\n      };\n    } else {\n      promise.resolve(result);\n    };\n  });\n  return promise;\n};\n\n/**\n * @method findOrCreate\n * @description searches for a document, otherwise creates it.\n */\n\nexports.Model.prototype.findOrCreate = function(query, document, options) {\n  var promise = new Promise()\n    , baseModel = this;\n  baseModel.findOne(query, function(error, result) {\n    if (error) {\n      if (error.message && error.message.match(/E11000/i)) {\n        promise.reject(new Error('Duplicate Key Error'), true);\n      } else {\n        promise.reject(error, true);\n      };\n    } else {\n      if (result && result !== null) {\n        promise.resolve(result);\n      } else {\n        var createPromise = baseModel.create(document);\n        createPromise.then(function(result) {\n          promise.resolve(result);\n        }, function(error) {\n          promise.reject(error, true);\n        });\n      }\n    };\n  });\n  return promise;\n};\n"}